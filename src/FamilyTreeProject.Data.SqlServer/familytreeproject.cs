#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class FamilyTreeProjectContext : System.Data.Linq.DataContext
{
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertChildren(Children instance);
  partial void UpdateChildren(Children instance);
  partial void DeleteChildren(Children instance);
  partial void InsertEventType(EventType instance);
  partial void UpdateEventType(EventType instance);
  partial void DeleteEventType(EventType instance);
  partial void InsertFamilies(Families instance);
  partial void UpdateFamilies(Families instance);
  partial void DeleteFamilies(Families instance);
  partial void InsertFamilyEvents(FamilyEvents instance);
  partial void UpdateFamilyEvents(FamilyEvents instance);
  partial void DeleteFamilyEvents(FamilyEvents instance);
  partial void InsertIndividualEvents(IndividualEvents instance);
  partial void UpdateIndividualEvents(IndividualEvents instance);
  partial void DeleteIndividualEvents(IndividualEvents instance);
  partial void InsertIndividuals(Individuals instance);
  partial void UpdateIndividuals(Individuals instance);
  partial void DeleteIndividuals(Individuals instance);
  #endregion
	
	public FamilyTreeProjectContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}

    public FamilyTreeProjectContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Children> Children
	{
		get
		{
			return this.GetTable<Children>();
		}
	}
	
	public System.Data.Linq.Table<EventType> EventType
	{
		get
		{
			return this.GetTable<EventType>();
		}
	}
	
	public System.Data.Linq.Table<Families> Families
	{
		get
		{
			return this.GetTable<Families>();
		}
	}
	
	public System.Data.Linq.Table<FamilyEvents> FamilyEvents
	{
		get
		{
			return this.GetTable<FamilyEvents>();
		}
	}
	
	public System.Data.Linq.Table<IndividualEvents> IndividualEvents
	{
		get
		{
			return this.GetTable<IndividualEvents>();
		}
	}
	
	public System.Data.Linq.Table<Individuals> Individuals
	{
		get
		{
			return this.GetTable<Individuals>();
		}
	}
}

public partial class Children : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FamilyId;
	
	private int _IndividualId;
	
	private EntityRef<Families> _Families;
	
	private EntityRef<Individuals> _Individuals;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFamilyIdChanging(int value);
    partial void OnFamilyIdChanged();
    partial void OnIndividualIdChanging(int value);
    partial void OnIndividualIdChanged();
    #endregion
	
	public Children()
	{
		this._Families = default(EntityRef<Families>);
		this._Individuals = default(EntityRef<Individuals>);
		OnCreated();
	}
	
	public int FamilyId
	{
		get
		{
			return this._FamilyId;
		}
		set
		{
			if ((this._FamilyId != value))
			{
				if (this._Families.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFamilyIdChanging(value);
				this.SendPropertyChanging();
				this._FamilyId = value;
				this.SendPropertyChanged("FamilyId");
				this.OnFamilyIdChanged();
			}
		}
	}
	
	public int IndividualId
	{
		get
		{
			return this._IndividualId;
		}
		set
		{
			if ((this._IndividualId != value))
			{
				if (this._Individuals.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIndividualIdChanging(value);
				this.SendPropertyChanging();
				this._IndividualId = value;
				this.SendPropertyChanged("IndividualId");
				this.OnIndividualIdChanged();
			}
		}
	}
	
	public Families Families
	{
		get
		{
			return this._Families.Entity;
		}
		set
		{
			Families previousValue = this._Families.Entity;
			if (((previousValue != value) 
						|| (this._Families.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Families.Entity = null;
					previousValue.Children.Remove(this);
				}
				this._Families.Entity = value;
				if ((value != null))
				{
					value.Children.Add(this);
					this._FamilyId = value.FamilyId;
				}
				else
				{
					this._FamilyId = default(int);
				}
				this.SendPropertyChanged("Families");
			}
		}
	}
	
	public Individuals Individuals
	{
		get
		{
			return this._Individuals.Entity;
		}
		set
		{
			Individuals previousValue = this._Individuals.Entity;
			if (((previousValue != value) 
						|| (this._Individuals.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Individuals.Entity = null;
					previousValue.Children.Remove(this);
				}
				this._Individuals.Entity = value;
				if ((value != null))
				{
					value.Children.Add(this);
					this._IndividualId = value.IndividualId;
				}
				else
				{
					this._IndividualId = default(int);
				}
				this.SendPropertyChanged("Individuals");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventTypeId;
	
	private string _EventTypeName;
	
	private EntitySet<IndividualEvents> _IndividualEvents;
	
	private EntitySet<FamilyEvents> _FamilyEvents;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    partial void OnEventTypeNameChanging(string value);
    partial void OnEventTypeNameChanged();
    #endregion
	
	public EventType()
	{
		this._IndividualEvents = new EntitySet<IndividualEvents>(new Action<IndividualEvents>(this.attach_IndividualEvents), new Action<IndividualEvents>(this.detach_IndividualEvents));
		this._FamilyEvents = new EntitySet<FamilyEvents>(new Action<FamilyEvents>(this.attach_FamilyEvents), new Action<FamilyEvents>(this.detach_FamilyEvents));
		OnCreated();
	}
	
	public int EventTypeId
	{
		get
		{
			return this._EventTypeId;
		}
		set
		{
			if ((this._EventTypeId != value))
			{
				this.OnEventTypeIdChanging(value);
				this.SendPropertyChanging();
				this._EventTypeId = value;
				this.SendPropertyChanged("EventTypeId");
				this.OnEventTypeIdChanged();
			}
		}
	}
	
	public string EventTypeName
	{
		get
		{
			return this._EventTypeName;
		}
		set
		{
			if ((this._EventTypeName != value))
			{
				this.OnEventTypeNameChanging(value);
				this.SendPropertyChanging();
				this._EventTypeName = value;
				this.SendPropertyChanged("EventTypeName");
				this.OnEventTypeNameChanged();
			}
		}
	}
	
	public EntitySet<IndividualEvents> IndividualEvents
	{
		get
		{
			return this._IndividualEvents;
		}
		set
		{
			this._IndividualEvents.Assign(value);
		}
	}
	
	public EntitySet<FamilyEvents> FamilyEvents
	{
		get
		{
			return this._FamilyEvents;
		}
		set
		{
			this._FamilyEvents.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_IndividualEvents(IndividualEvents entity)
	{
		this.SendPropertyChanging();
		entity.EventType = this;
	}
	
	private void detach_IndividualEvents(IndividualEvents entity)
	{
		this.SendPropertyChanging();
		entity.EventType = null;
	}
	
	private void attach_FamilyEvents(FamilyEvents entity)
	{
		this.SendPropertyChanging();
		entity.EventType = this;
	}
	
	private void detach_FamilyEvents(FamilyEvents entity)
	{
		this.SendPropertyChanging();
		entity.EventType = null;
	}
}

public partial class Families : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FamilyId;
	
	private System.Nullable<int> _HusbandId;
	
	private System.Nullable<int> _WifeId;
	
	private EntitySet<Children> _Children;
	
	private EntityRef<Individuals> _Individuals;
	
	private EntityRef<Individuals> _Wife;
	
	private EntitySet<FamilyEvents> _FamilyEvents;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFamilyIdChanging(int value);
    partial void OnFamilyIdChanged();
    partial void OnHusbandIdChanging(System.Nullable<int> value);
    partial void OnHusbandIdChanged();
    partial void OnWifeIdChanging(System.Nullable<int> value);
    partial void OnWifeIdChanged();
    #endregion
	
	public Families()
	{
		this._Children = new EntitySet<Children>(new Action<Children>(this.attach_Children), new Action<Children>(this.detach_Children));
		this._Individuals = default(EntityRef<Individuals>);
		this._Wife = default(EntityRef<Individuals>);
		this._FamilyEvents = new EntitySet<FamilyEvents>(new Action<FamilyEvents>(this.attach_FamilyEvents), new Action<FamilyEvents>(this.detach_FamilyEvents));
		OnCreated();
	}
	
	public int FamilyId
	{
		get
		{
			return this._FamilyId;
		}
		set
		{
			if ((this._FamilyId != value))
			{
				this.OnFamilyIdChanging(value);
				this.SendPropertyChanging();
				this._FamilyId = value;
				this.SendPropertyChanged("FamilyId");
				this.OnFamilyIdChanged();
			}
		}
	}
	
	public System.Nullable<int> HusbandId
	{
		get
		{
			return this._HusbandId;
		}
		set
		{
			if ((this._HusbandId != value))
			{
				if (this._Individuals.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnHusbandIdChanging(value);
				this.SendPropertyChanging();
				this._HusbandId = value;
				this.SendPropertyChanged("HusbandId");
				this.OnHusbandIdChanged();
			}
		}
	}
	
	public System.Nullable<int> WifeId
	{
		get
		{
			return this._WifeId;
		}
		set
		{
			if ((this._WifeId != value))
			{
				if (this._Wife.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWifeIdChanging(value);
				this.SendPropertyChanging();
				this._WifeId = value;
				this.SendPropertyChanged("WifeId");
				this.OnWifeIdChanged();
			}
		}
	}
	
	public EntitySet<Children> Children
	{
		get
		{
			return this._Children;
		}
		set
		{
			this._Children.Assign(value);
		}
	}
	
	public Individuals Individuals
	{
		get
		{
			return this._Individuals.Entity;
		}
		set
		{
			Individuals previousValue = this._Individuals.Entity;
			if (((previousValue != value) 
						|| (this._Individuals.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Individuals.Entity = null;
					previousValue.Families.Remove(this);
				}
				this._Individuals.Entity = value;
				if ((value != null))
				{
					value.Families.Add(this);
					this._HusbandId = value.IndividualId;
				}
				else
				{
					this._HusbandId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Individuals");
			}
		}
	}
	
	public Individuals Wife
	{
		get
		{
			return this._Wife.Entity;
		}
		set
		{
			Individuals previousValue = this._Wife.Entity;
			if (((previousValue != value) 
						|| (this._Wife.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Wife.Entity = null;
					previousValue.Individual.Remove(this);
				}
				this._Wife.Entity = value;
				if ((value != null))
				{
					value.Individual.Add(this);
					this._WifeId = value.IndividualId;
				}
				else
				{
					this._WifeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Wife");
			}
		}
	}
	
	public EntitySet<FamilyEvents> FamilyEvents
	{
		get
		{
			return this._FamilyEvents;
		}
		set
		{
			this._FamilyEvents.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Children(Children entity)
	{
		this.SendPropertyChanging();
		entity.Families = this;
	}
	
	private void detach_Children(Children entity)
	{
		this.SendPropertyChanging();
		entity.Families = null;
	}
	
	private void attach_FamilyEvents(FamilyEvents entity)
	{
		this.SendPropertyChanging();
		entity.Families = this;
	}
	
	private void detach_FamilyEvents(FamilyEvents entity)
	{
		this.SendPropertyChanging();
		entity.Families = null;
	}
}

public partial class FamilyEvents : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventId;
	
	private int _EventTypeId;
	
	private int _FamilyId;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Place;
	
	private EntityRef<EventType> _EventType;
	
	private EntityRef<Families> _Families;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    partial void OnFamilyIdChanging(int value);
    partial void OnFamilyIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    #endregion
	
	public FamilyEvents()
	{
		this._EventType = default(EntityRef<EventType>);
		this._Families = default(EntityRef<Families>);
		OnCreated();
	}
	
	public int EventId
	{
		get
		{
			return this._EventId;
		}
		set
		{
			if ((this._EventId != value))
			{
				this.OnEventIdChanging(value);
				this.SendPropertyChanging();
				this._EventId = value;
				this.SendPropertyChanged("EventId");
				this.OnEventIdChanged();
			}
		}
	}
	
	public int EventTypeId
	{
		get
		{
			return this._EventTypeId;
		}
		set
		{
			if ((this._EventTypeId != value))
			{
				if (this._EventType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventTypeIdChanging(value);
				this.SendPropertyChanging();
				this._EventTypeId = value;
				this.SendPropertyChanged("EventTypeId");
				this.OnEventTypeIdChanged();
			}
		}
	}
	
	public int FamilyId
	{
		get
		{
			return this._FamilyId;
		}
		set
		{
			if ((this._FamilyId != value))
			{
				if (this._Families.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFamilyIdChanging(value);
				this.SendPropertyChanging();
				this._FamilyId = value;
				this.SendPropertyChanged("FamilyId");
				this.OnFamilyIdChanged();
			}
		}
	}
	
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	public string Place
	{
		get
		{
			return this._Place;
		}
		set
		{
			if ((this._Place != value))
			{
				this.OnPlaceChanging(value);
				this.SendPropertyChanging();
				this._Place = value;
				this.SendPropertyChanged("Place");
				this.OnPlaceChanged();
			}
		}
	}
	
	public EventType EventType
	{
		get
		{
			return this._EventType.Entity;
		}
		set
		{
			EventType previousValue = this._EventType.Entity;
			if (((previousValue != value) 
						|| (this._EventType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EventType.Entity = null;
					previousValue.FamilyEvents.Remove(this);
				}
				this._EventType.Entity = value;
				if ((value != null))
				{
					value.FamilyEvents.Add(this);
					this._EventTypeId = value.EventTypeId;
				}
				else
				{
					this._EventTypeId = default(int);
				}
				this.SendPropertyChanged("EventType");
			}
		}
	}
	
	public Families Families
	{
		get
		{
			return this._Families.Entity;
		}
		set
		{
			Families previousValue = this._Families.Entity;
			if (((previousValue != value) 
						|| (this._Families.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Families.Entity = null;
					previousValue.FamilyEvents.Remove(this);
				}
				this._Families.Entity = value;
				if ((value != null))
				{
					value.FamilyEvents.Add(this);
					this._FamilyId = value.FamilyId;
				}
				else
				{
					this._FamilyId = default(int);
				}
				this.SendPropertyChanged("Families");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class IndividualEvents : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EventId;
	
	private int _EventTypeId;
	
	private int _IndividualId;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Place;
	
	private EntityRef<EventType> _EventType;
	
	private EntityRef<Individuals> _Individuals;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    partial void OnIndividualIdChanging(int value);
    partial void OnIndividualIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    #endregion
	
	public IndividualEvents()
	{
		this._EventType = default(EntityRef<EventType>);
		this._Individuals = default(EntityRef<Individuals>);
		OnCreated();
	}
	
	public int EventId
	{
		get
		{
			return this._EventId;
		}
		set
		{
			if ((this._EventId != value))
			{
				this.OnEventIdChanging(value);
				this.SendPropertyChanging();
				this._EventId = value;
				this.SendPropertyChanged("EventId");
				this.OnEventIdChanged();
			}
		}
	}
	
	public int EventTypeId
	{
		get
		{
			return this._EventTypeId;
		}
		set
		{
			if ((this._EventTypeId != value))
			{
				if (this._EventType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventTypeIdChanging(value);
				this.SendPropertyChanging();
				this._EventTypeId = value;
				this.SendPropertyChanged("EventTypeId");
				this.OnEventTypeIdChanged();
			}
		}
	}
	
	public int IndividualId
	{
		get
		{
			return this._IndividualId;
		}
		set
		{
			if ((this._IndividualId != value))
			{
				if (this._Individuals.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIndividualIdChanging(value);
				this.SendPropertyChanging();
				this._IndividualId = value;
				this.SendPropertyChanged("IndividualId");
				this.OnIndividualIdChanged();
			}
		}
	}
	
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	public string Place
	{
		get
		{
			return this._Place;
		}
		set
		{
			if ((this._Place != value))
			{
				this.OnPlaceChanging(value);
				this.SendPropertyChanging();
				this._Place = value;
				this.SendPropertyChanged("Place");
				this.OnPlaceChanged();
			}
		}
	}
	
	public EventType EventType
	{
		get
		{
			return this._EventType.Entity;
		}
		set
		{
			EventType previousValue = this._EventType.Entity;
			if (((previousValue != value) 
						|| (this._EventType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EventType.Entity = null;
					previousValue.IndividualEvents.Remove(this);
				}
				this._EventType.Entity = value;
				if ((value != null))
				{
					value.IndividualEvents.Add(this);
					this._EventTypeId = value.EventTypeId;
				}
				else
				{
					this._EventTypeId = default(int);
				}
				this.SendPropertyChanged("EventType");
			}
		}
	}
	
	public Individuals Individuals
	{
		get
		{
			return this._Individuals.Entity;
		}
		set
		{
			Individuals previousValue = this._Individuals.Entity;
			if (((previousValue != value) 
						|| (this._Individuals.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Individuals.Entity = null;
					previousValue.IndividualEvents.Remove(this);
				}
				this._Individuals.Entity = value;
				if ((value != null))
				{
					value.IndividualEvents.Add(this);
					this._IndividualId = value.IndividualId;
				}
				else
				{
					this._IndividualId = default(int);
				}
				this.SendPropertyChanged("Individuals");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class Individuals : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IndividualId;
	
	private int _TreeId;
	
	private string _FirstName;
	
	private string _LastName;
	
	private System.Nullable<int> _FatherId;
	
	private System.Nullable<int> _MotherId;
	
	private int _Sex;
	
	private EntitySet<Children> _Children;
	
	private EntitySet<IndividualEvents> _IndividualEvents;
	
	private EntitySet<Families> _Families;
	
	private EntitySet<Families> _Individual;
	
	private EntityRef<Individuals> _Father;
	
	private EntitySet<Individuals> _Individuals_Father;
	
	private EntityRef<Individuals> _Mother;
	
	private EntitySet<Individuals> _Individuals_Mother;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndividualIdChanging(int value);
    partial void OnIndividualIdChanged();
    partial void OnTreeIdChanging(int value);
    partial void OnTreeIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFatherIdChanging(System.Nullable<int> value);
    partial void OnFatherIdChanged();
    partial void OnMotherIdChanging(System.Nullable<int> value);
    partial void OnMotherIdChanged();
    partial void OnSexChanging(int value);
    partial void OnSexChanged();
    #endregion
	
	public Individuals()
	{
		this._Children = new EntitySet<Children>(new Action<Children>(this.attach_Children), new Action<Children>(this.detach_Children));
		this._IndividualEvents = new EntitySet<IndividualEvents>(new Action<IndividualEvents>(this.attach_IndividualEvents), new Action<IndividualEvents>(this.detach_IndividualEvents));
		this._Families = new EntitySet<Families>(new Action<Families>(this.attach_Families), new Action<Families>(this.detach_Families));
		this._Individual = new EntitySet<Families>(new Action<Families>(this.attach_Individual), new Action<Families>(this.detach_Individual));
		this._Father = default(EntityRef<Individuals>);
		this._Individuals_Father = new EntitySet<Individuals>(new Action<Individuals>(this.attach_Individuals_Father), new Action<Individuals>(this.detach_Individuals_Father));
		this._Mother = default(EntityRef<Individuals>);
		this._Individuals_Mother = new EntitySet<Individuals>(new Action<Individuals>(this.attach_Individuals_Mother), new Action<Individuals>(this.detach_Individuals_Mother));
		OnCreated();
	}
	
	public int IndividualId
	{
		get
		{
			return this._IndividualId;
		}
		set
		{
			if ((this._IndividualId != value))
			{
				this.OnIndividualIdChanging(value);
				this.SendPropertyChanging();
				this._IndividualId = value;
				this.SendPropertyChanged("IndividualId");
				this.OnIndividualIdChanged();
			}
		}
	}
	
	public int TreeId
	{
		get
		{
			return this._TreeId;
		}
		set
		{
			if ((this._TreeId != value))
			{
				this.OnTreeIdChanging(value);
				this.SendPropertyChanging();
				this._TreeId = value;
				this.SendPropertyChanged("TreeId");
				this.OnTreeIdChanged();
			}
		}
	}
	
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	public System.Nullable<int> FatherId
	{
		get
		{
			return this._FatherId;
		}
		set
		{
			if ((this._FatherId != value))
			{
				if (this._Father.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFatherIdChanging(value);
				this.SendPropertyChanging();
				this._FatherId = value;
				this.SendPropertyChanged("FatherId");
				this.OnFatherIdChanged();
			}
		}
	}
	
	public System.Nullable<int> MotherId
	{
		get
		{
			return this._MotherId;
		}
		set
		{
			if ((this._MotherId != value))
			{
				if (this._Mother.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMotherIdChanging(value);
				this.SendPropertyChanging();
				this._MotherId = value;
				this.SendPropertyChanged("MotherId");
				this.OnMotherIdChanged();
			}
		}
	}
	
	public int Sex
	{
		get
		{
			return this._Sex;
		}
		set
		{
			if ((this._Sex != value))
			{
				this.OnSexChanging(value);
				this.SendPropertyChanging();
				this._Sex = value;
				this.SendPropertyChanged("Sex");
				this.OnSexChanged();
			}
		}
	}
	
	public EntitySet<Children> Children
	{
		get
		{
			return this._Children;
		}
		set
		{
			this._Children.Assign(value);
		}
	}
	
	public EntitySet<IndividualEvents> IndividualEvents
	{
		get
		{
			return this._IndividualEvents;
		}
		set
		{
			this._IndividualEvents.Assign(value);
		}
	}
	
	public EntitySet<Families> Families
	{
		get
		{
			return this._Families;
		}
		set
		{
			this._Families.Assign(value);
		}
	}
	
	public EntitySet<Families> Individual
	{
		get
		{
			return this._Individual;
		}
		set
		{
			this._Individual.Assign(value);
		}
	}
	
	public Individuals Father
	{
		get
		{
			return this._Father.Entity;
		}
		set
		{
			Individuals previousValue = this._Father.Entity;
			if (((previousValue != value) 
						|| (this._Father.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Father.Entity = null;
					previousValue.Individuals_Father.Remove(this);
				}
				this._Father.Entity = value;
				if ((value != null))
				{
					value.Individuals_Father.Add(this);
					this._FatherId = value.IndividualId;
				}
				else
				{
					this._FatherId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Father");
			}
		}
	}
	
	public EntitySet<Individuals> Individuals_Father
	{
		get
		{
			return this._Individuals_Father;
		}
		set
		{
			this._Individuals_Father.Assign(value);
		}
	}
	
	public Individuals Mother
	{
		get
		{
			return this._Mother.Entity;
		}
		set
		{
			Individuals previousValue = this._Mother.Entity;
			if (((previousValue != value) 
						|| (this._Mother.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Mother.Entity = null;
					previousValue.Individuals_Mother.Remove(this);
				}
				this._Mother.Entity = value;
				if ((value != null))
				{
					value.Individuals_Mother.Add(this);
					this._MotherId = value.IndividualId;
				}
				else
				{
					this._MotherId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Mother");
			}
		}
	}
	
	public EntitySet<Individuals> Individuals_Mother
	{
		get
		{
			return this._Individuals_Mother;
		}
		set
		{
			this._Individuals_Mother.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Children(Children entity)
	{
		this.SendPropertyChanging();
		entity.Individuals = this;
	}
	
	private void detach_Children(Children entity)
	{
		this.SendPropertyChanging();
		entity.Individuals = null;
	}
	
	private void attach_IndividualEvents(IndividualEvents entity)
	{
		this.SendPropertyChanging();
		entity.Individuals = this;
	}
	
	private void detach_IndividualEvents(IndividualEvents entity)
	{
		this.SendPropertyChanging();
		entity.Individuals = null;
	}
	
	private void attach_Families(Families entity)
	{
		this.SendPropertyChanging();
		entity.Individuals = this;
	}
	
	private void detach_Families(Families entity)
	{
		this.SendPropertyChanging();
		entity.Individuals = null;
	}
	
	private void attach_Individual(Families entity)
	{
		this.SendPropertyChanging();
		entity.Wife = this;
	}
	
	private void detach_Individual(Families entity)
	{
		this.SendPropertyChanging();
		entity.Wife = null;
	}
	
	private void attach_Individuals_Father(Individuals entity)
	{
		this.SendPropertyChanging();
		entity.Father = this;
	}
	
	private void detach_Individuals_Father(Individuals entity)
	{
		this.SendPropertyChanging();
		entity.Father = null;
	}
	
	private void attach_Individuals_Mother(Individuals entity)
	{
		this.SendPropertyChanging();
		entity.Mother = this;
	}
	
	private void detach_Individuals_Mother(Individuals entity)
	{
		this.SendPropertyChanging();
		entity.Mother = null;
	}
}
#pragma warning restore 1591
